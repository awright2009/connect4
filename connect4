{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Code from environment.py"
      ],
      "metadata": {
        "id": "qh0Y-Hf72bY0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "from IPython.display import clear_output\n",
        "\n",
        "import time\n",
        "from timeit import default_timer as timer\n",
        "\n",
        "from scipy.signal import convolve2d\n",
        "\n",
        "def visualize(board):\n",
        "    plt.axes()\n",
        "    rectangle = plt.Rectangle(\n",
        "        (-0.5, len(board)*-1+0.5), len(board[0]), len(board), fc='blue')\n",
        "    circles = []\n",
        "    for i, row in enumerate(board):\n",
        "        for j, val in enumerate(row):\n",
        "            color = 'white' if val == 0 else 'red' if val == 1 else 'yellow'\n",
        "            circles.append(plt.Circle((j, i*-1), 0.4, fc=color))\n",
        "\n",
        "    plt.gca().add_patch(rectangle)\n",
        "    for circle in circles:\n",
        "        plt.gca().add_patch(circle)\n",
        "\n",
        "    plt.axis('scaled')\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "class HelperFunctions:\n",
        "    @staticmethod\n",
        "    def place(choice: int, board, player: int):\n",
        "        board = board.copy()\n",
        "\n",
        "        if (board[0, choice] != 0):\n",
        "            print(f\"invalid Move! Player {player} loses its turn!\")\n",
        "            return board\n",
        "\n",
        "        row = board.shape[0] - 1\n",
        "        while (board[row, choice] != 0):\n",
        "            row -= 1\n",
        "\n",
        "        board[row, choice] = player\n",
        "        return board\n",
        "\n",
        "    @staticmethod\n",
        "    def get_valid_moves(board):\n",
        "        return np.where(board[0]==0)[0].tolist()\n",
        "\n",
        "    @staticmethod\n",
        "    def check_win(board):\n",
        "        # check for win/loss\n",
        "        horizontal_kernel = np.array([[1, 1, 1, 1]])\n",
        "        vertical_kernel = np.transpose(horizontal_kernel)\n",
        "        diag1_kernel = np.eye(4, dtype=np.uint8)\n",
        "        diag2_kernel = np.fliplr(diag1_kernel)\n",
        "        detection_kernels = [horizontal_kernel,\n",
        "                             vertical_kernel, diag1_kernel, diag2_kernel]\n",
        "        for kernel in detection_kernels:\n",
        "\n",
        "            a = convolve2d(board, kernel, mode='valid')\n",
        "            if ((a == 4).any()):\n",
        "                return 1\n",
        "            if ((a == -4).any()):\n",
        "                return -1\n",
        "\n",
        "        # check for draw\n",
        "        if (len(HelperFunctions.get_valid_moves(board)) == 0):\n",
        "            return 0\n",
        "\n",
        "        return None\n",
        "\n",
        "    @staticmethod\n",
        "    def time_function(theFunc, *args):\n",
        "        start = timer()\n",
        "        theFunc(*args)\n",
        "        print(f\"{theFunc.__name__}: {(timer() - start) * 1000} ms\")\n",
        "\n",
        "    @staticmethod\n",
        "    def calc_utility(player, board):\n",
        "        winner = HelperFunctions.check_win(board)\n",
        "\n",
        "        if (winner == None):\n",
        "            raise Exception(\"Tried to calculate the utility of non-terminal state\")\n",
        "\n",
        "        if winner == 0:\n",
        "            return 0\n",
        "        if winner == player:\n",
        "            return 1\n",
        "        else:\n",
        "            return -1\n",
        "\n",
        "\n",
        "def empty_board(shape=(6, 7)):\n",
        "    return np.full(shape=shape, fill_value=0)\n",
        "\n",
        "\n",
        "def truly_dynamic_environment(players, size=(6, 7), visual=False, board=None):\n",
        "    result = {}\n",
        "    if board is None:\n",
        "        board = empty_board(shape=size)\n",
        "    turn_num = 0\n",
        "    result['algo_info'] = {\n",
        "        players[0]['name']: {'time': []},\n",
        "        players[1]['name']: {'time': []}\n",
        "    }\n",
        "    result['algo_info']\n",
        "    past_boards = []\n",
        "    # While there is not a winner yet (0 does not mean draw in this case, it means non terminal state)\n",
        "    while (HelperFunctions.check_win(board) == None):\n",
        "        player_turn = turn_num % 2\n",
        "\n",
        "        start = timer()\n",
        "\n",
        "        # pass a copy of the board so the agent cannot cheat by changing the board\n",
        "        choice = players[player_turn]['algo'](\n",
        "            board.copy(), players[player_turn]['player'], **players[player_turn]['args'])\n",
        "        end = timer()\n",
        "\n",
        "        board = HelperFunctions.place(\n",
        "            choice, board, player=players[player_turn]['player'])\n",
        "        if visual:\n",
        "            visualize(board)\n",
        "            clear_output(wait=True)\n",
        "        result['algo_info'][players[player_turn]['name']\n",
        "                            ]['time'].append((end - start) * 1000)\n",
        "        past_boards.append(board)\n",
        "        turn_num += 1\n",
        "    result['winner'] = HelperFunctions.check_win(board)\n",
        "    result['turns_taken'] = turn_num\n",
        "    for name in result['algo_info']:\n",
        "        print(\n",
        "            f\"{name} took a total of {round(np.sum(result['algo_info'][name]['time'])/ 1000,3)} seconds\")\n",
        "\n",
        "    print(\n",
        "        f\"The winner is {players[(result['winner']-1)//-2]['name']} ({result['winner']})\")\n",
        "    print(f\"Turns Taken: {turn_num}\")\n",
        "\n",
        "    return result, board, past_boards\n",
        "\n",
        "\n",
        "def replay(all_boards, sleep_time: int = 1):\n",
        "    for board in all_boards:\n",
        "        visualize(board)\n",
        "        time.sleep(sleep_time)\n",
        "        clear_output(wait=True)\n",
        "\n",
        "\n",
        "# print(__name__)\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "    board = [\n",
        "        [-1,  0, -1, -1,  0,  0,  0],\n",
        "        [1,  0, -1,  1,  0,  0,  0,],\n",
        "        [1,  0, -1, -1,  1,  0,  0,],\n",
        "        [1,  0,  1,  1, -1,  0,  0],\n",
        "        [-1,  0, -1,  1,  1, 0,  0],\n",
        "        [-1,  1,  1,  1, -1,  0,  0]\n",
        "\n",
        "    ]\n",
        "\n",
        "    visualize(board)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "LDaGtoqM2QZK",
        "outputId": "3ef72076-ebe1-4356-f5d4-988ca96673b0"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zHxP5gbX1-qP"
      },
      "source": [
        "# Example of how to use the environment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "UgMhreIi1-qP"
      },
      "outputs": [],
      "source": [
        "!pip install -q matplotlib numpy scipy\n",
        "\n",
        "#from environment import truly_dynamic_environment, replay, visualize\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TSQM4HaL1-qP"
      },
      "source": [
        "Define agent functions. One example used a simple function and the second uses a class which should be used for model-based agents."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "koBbeC8f1-qP"
      },
      "outputs": [],
      "source": [
        "# example as a function\n",
        "def act_random(board, player):\n",
        "    \"\"\"A random Connect-4 agent function.\"\"\"\n",
        "    return np.random.choice(np.where(board[0]==0)[0])\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "import math\n",
        "import copy\n",
        "import random\n",
        "\n",
        "DEBUG = 0\n",
        "\n",
        "# Alexander Wright agent\n",
        "class AwrightAgent:\n",
        "    def __init__(self, name = \"Agent\"):\n",
        "        self.name = name\n",
        "        self.move_count = 0\n",
        "        self.last_x = 0\n",
        "        self.last_y = 0\n",
        "\n",
        "    def act(self, board, player):\n",
        "        self.move_count += 1\n",
        "        if self.move_count <= 2:\n",
        "          return 3\n",
        "        max_int = 2147549183\n",
        "\n",
        "\n",
        "        # these are still very slow\n",
        "        #score, move = self.minimax_correct(copy.deepcopy(board), 100000000000000, -max_int, max_int, player, player, False)\n",
        "        #score, move = self.minimax_correct_no_heuristic(copy.deepcopy(board), 100000000000000, -max_int, max_int, player, player, False)\n",
        "        #score, move = self.minimax_correct_best_move(copy.deepcopy(board), 100000000000000, -max_int, max_int, player, player, False)\n",
        "\n",
        "        move = self.UCT_depth1(board, 100000, player)\n",
        "        return move\n",
        "\n",
        "\n",
        "    # Return available moves given a board\n",
        "    def actions(self, board):\n",
        "        available = []\n",
        "\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        for x in range(num_col):\n",
        "            for y in range(num_row - 1, -1, -1):\n",
        "                if board[y][x] == 0:\n",
        "                    available.append(x)\n",
        "                    break\n",
        "\n",
        "        return available\n",
        "\n",
        "    # Makes a move given a board, move (0-6 column) and player (-1,1)\n",
        "    def make_move(self, board, move, player):\n",
        "        # we loop from the botton of the board up until we find a space\n",
        "        # range(start, stop, step) -- start at end, stop past zero, decrement\n",
        "        for y in range(len(board) - 1, -1, -1):\n",
        "            if board[y][move] == 0:\n",
        "                board[y][move] = player\n",
        "                self.last_x = move\n",
        "                self.last_y = y\n",
        "                break\n",
        "\n",
        "        # result wants a board returned, so we modify the board and return a copy of it\n",
        "        new_board = copy.deepcopy(board)\n",
        "        return new_board\n",
        "\n",
        "    # Check for a consecutive set of pieces starting from (x,y) in direction (dx,dy)\n",
        "    def check_consecutive(self, board, y, x, dy, dx):\n",
        "        player = board[y][x]\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "\n",
        "        # player should not be empty space\n",
        "        if player == 0:\n",
        "            return False\n",
        "\n",
        "        # checking for three additional neighboring pieces: 1, 2, 3\n",
        "        for i in range(1, 4):\n",
        "            # new posiiton is initial plus delta, we skip zero as we already know we have the first spot\n",
        "            ny = y + dy * i\n",
        "            nx = x + dx * i\n",
        "\n",
        "            # if out of bounds, or the color changes, then we didn't win\n",
        "            if ny < 0 or ny >= num_row or nx < 0 or nx >= num_col or board[ny][nx] != player:\n",
        "                return False\n",
        "\n",
        "        return True\n",
        "\n",
        "\n",
        "    # Check if someone has won given a board by looping through each position and checking each direction for a winner\n",
        "    def check_winner(self, board):\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        # For every position on the board\n",
        "        for y in range(num_row):\n",
        "            for x in range(num_col):\n",
        "\n",
        "                # if the position is not empty\n",
        "                if board[y][x] != 0:\n",
        "\n",
        "                    # Check for a win by moving right\n",
        "                    if self.check_consecutive(board, y, x, 0, 1):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving left\n",
        "                    if self.check_consecutive(board, y, x, 0, -1):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving up\n",
        "                    if self.check_consecutive(board, y, x, 1, 0):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving down\n",
        "                    if self.check_consecutive(board, y, x, -1, 0):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving up right\n",
        "                    if self.check_consecutive(board, y, x, 1, 1):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving down right\n",
        "                    if self.check_consecutive(board, y, x, 1, -1):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving down left\n",
        "                    if self.check_consecutive(board, y, x, -1, -1):\n",
        "                        return board[y][x]\n",
        "\n",
        "                    # Check for a win by moving up left\n",
        "                    if self.check_consecutive(board, y, x, -1, 1):\n",
        "                        return board[y][x]\n",
        "\n",
        "\n",
        "\n",
        "        return 0\n",
        "\n",
        "    # Note that the tic tac toe minimax examples do not use a \"score\"\n",
        "    # They just use the win/loss/draw totals\n",
        "    def utility(self, board, player):\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == player:\n",
        "            return 1\n",
        "        elif winner == self.other(player):\n",
        "            return -1\n",
        "        elif self.board_full(board):\n",
        "            return 0\n",
        "        else:\n",
        "            return None\n",
        "\n",
        "    # Given a player (-1,1) return the opposite player (1,-1)\n",
        "    # Used for minimax algorithm\n",
        "    def other(self, player):\n",
        "        if player == 1:\n",
        "          return -1\n",
        "        else:\n",
        "          return 1\n",
        "\n",
        "    # Play a game randomly, then return if we won or lost\n",
        "    def playout(self, state, action, player):\n",
        "        \"\"\"Perform a random playout starting with the given action on the given board\n",
        "        and return the utility of the finished game.\"\"\"\n",
        "        state = self.result(state, player, action)\n",
        "        current_player = self.other(player)\n",
        "\n",
        "        while(True):\n",
        "            # reached terminal state?\n",
        "            u = self.utility(state, player)\n",
        "            if u is not None:\n",
        "              return(u)\n",
        "\n",
        "            # we use a random playout policy\n",
        "            a = np.random.choice(self.actions(state))\n",
        "            state = self.result(state, current_player, a)\n",
        "            #print(state)\n",
        "\n",
        "            # switch between players\n",
        "            current_player = self.other(current_player)\n",
        "\n",
        "    # Plays the game N times randomly, gives win/loss numbers\n",
        "    def playouts(self, board, action, player, N = 100):\n",
        "        \"\"\"Perform N playouts following the given action for the given board.\"\"\"\n",
        "        return [ self.playout(board, action, player) for i in range(N) ]\n",
        "\n",
        "\n",
        "    # Returns best move given N playouts of random moves, where best is the move that caused us to win the most\n",
        "    def pmcs(self, board, N, player):\n",
        "        global DEBUG\n",
        "\n",
        "        available = self.actions(board)\n",
        "        if available == 0:\n",
        "          return None\n",
        "\n",
        "        n = math.floor(N/len(available))\n",
        "        if DEBUG >= 1:\n",
        "          print(f\"Actions: {available} ({N} total playouts = {n} playouts per action)\")\n",
        "\n",
        "\n",
        "        ps = { i : np.mean(self.playouts(board, i, player, N = n)) for i in available }\n",
        "\n",
        "        if DEBUG >= 1:\n",
        "          display(ps)\n",
        "\n",
        "        move = max(ps, key=ps.get)\n",
        "        return move\n",
        "\n",
        "    # Just changed function parameters to match the tic tac toe example (plus debug flags)\n",
        "    def my_playout_compat(self, global_board, action, player, show_final_board, debug):\n",
        "        # player tokens\n",
        "        opponent = -player\n",
        "\n",
        "        if debug:\n",
        "          visualize(global_board)\n",
        "\n",
        "\n",
        "        # play until someone wins or no more moves\n",
        "        while 1:\n",
        "          move1 = action\n",
        "          if debug:\n",
        "            print(\"Player 1 Move \", move1, \" Random\")\n",
        "          global_board = self.make_move(global_board, move1, player)\n",
        "\n",
        "          if debug:\n",
        "            visualize(global_board)\n",
        "            time.sleep(1)\n",
        "\n",
        "          if self.terminal(global_board):\n",
        "            break\n",
        "          #move2 = random_player(global_board, opponent)\n",
        "          temp_board = copy.deepcopy(global_board)\n",
        "          move2 = self.pmcs(temp_board, 1000, player)\n",
        "\n",
        "          if debug:\n",
        "            print(\"Player 2 Move \", move2, \" Random\")\n",
        "          global_board = self.make_move(global_board, move2, opponent)\n",
        "          if debug:\n",
        "            visualize(global_board)\n",
        "            time.sleep(1)\n",
        "          if self.terminal(global_board):\n",
        "            break\n",
        "\n",
        "\n",
        "        winner = self.check_winner(global_board)\n",
        "\n",
        "        if show_final_board:\n",
        "          visualize(global_board)\n",
        "          print(self.get_winner(global_board))\n",
        "\n",
        "        return winner\n",
        "\n",
        "\n",
        "    def terminal(self, board):\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == 1:\n",
        "            return True\n",
        "        elif winner == -1:\n",
        "            return True\n",
        "        elif self.board_full(board):\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "\n",
        "    # Check if the board is full\n",
        "    def board_full(self, board):\n",
        "        for row in board:\n",
        "            # if any position is not filled (zero), then we are not full\n",
        "            if 0 in row:\n",
        "                return False\n",
        "        return True\n",
        "\n",
        "    # returns winner result as a string\n",
        "    def get_winner(self, board):\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == 1:\n",
        "            return \"Player 1 wins\"\n",
        "        elif winner == -1:\n",
        "            return \"Player 2 wins\"\n",
        "        elif self.board_full(board):\n",
        "            return \"Draw\"\n",
        "        else:\n",
        "            return \"No winners yet\"\n",
        "\n",
        "\n",
        "    def UCT_depth1(self, board, N, player):\n",
        "        \"\"\"Upper Confidence bound applied to Trees for limited tree depth of 1.\n",
        "        Simulation budget is N playouts.\"\"\"\n",
        "        global DEBUG\n",
        "\n",
        "        C = math.sqrt(2) # tradeoff constant\n",
        "\n",
        "        # the tree is 1 action deep\n",
        "        acts = self.actions(board)\n",
        "\n",
        "        u = [0] * len(acts) # total utility through actions\n",
        "        n = [0] * len(acts) # number of playouts through actions\n",
        "        n_parent = 0 # total playouts so far (i.e., number of playouts through parent)\n",
        "\n",
        "        # make sure we try each action once\n",
        "        UCB1 = [+math.inf] * len(acts)\n",
        "\n",
        "        for i in range(N):\n",
        "\n",
        "            # Select\n",
        "            action_id = UCB1.index(max(UCB1))\n",
        "\n",
        "            # Expand\n",
        "            # UTC would expand the tree. We keep the tree at depth 1, essentially performing\n",
        "            # Pure Monte Carlo search with an added UCB1 selection policy.\n",
        "\n",
        "            # Simulate\n",
        "            p = self.my_playout_compat(board, acts[action_id], player, False, False)\n",
        "\n",
        "            # Back-Propagate (i.e., update counts and UCB1)\n",
        "            u[action_id] += p\n",
        "            n[action_id] += 1\n",
        "            n_parent += 1\n",
        "\n",
        "            for action_id in range(len(acts)):\n",
        "                if n[action_id] > 0:\n",
        "                    UCB1[action_id] = u[action_id] / n[action_id] + C * math.sqrt(math.log(n_parent) / n[action_id])\n",
        "\n",
        "        # return action with largest number of playouts\n",
        "        action = acts[n.index(max(n))]\n",
        "\n",
        "        if DEBUG >= 1:\n",
        "            print(pd.DataFrame({'action':acts,\n",
        "                                'total utility':u,\n",
        "                                '# of playouts':n,\n",
        "                                'UCB1':UCB1}))\n",
        "            print()\n",
        "            print(f\"Best action: {action}\")\n",
        "\n",
        "\n",
        "        return action\n",
        "\n",
        "\n",
        "\n",
        "    def visualize(self, board):\n",
        "        # make these images smaller (2 inches by 2 inches)\n",
        "        plt.figure(figsize=(2, 2))\n",
        "\n",
        "        plt.axes()\n",
        "        rectangle=plt.Rectangle((-0.5,len(board)*-1+0.5),len(board[0]),len(board),fc='blue')\n",
        "        circles=[]\n",
        "        for i,row in enumerate(board):\n",
        "            for j,val in enumerate(row):\n",
        "                color='white' if val==0 else 'red' if val==1 else 'yellow'\n",
        "                circles.append(plt.Circle((j,i*-1),0.4,fc=color))\n",
        "\n",
        "        plt.gca().add_patch(rectangle)\n",
        "        for circle in circles:\n",
        "            plt.gca().add_patch(circle)\n",
        "\n",
        "        plt.axis('scaled')\n",
        "        plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    # adds a flag that will use pink and olive instead of red and yellow\n",
        "    def visualize_debug(self, board, fake=False):\n",
        "        plt.axes()\n",
        "        rectangle=plt.Rectangle((-0.5,len(board)*-1+0.5),len(board[0]),len(board),fc='blue')\n",
        "        circles=[]\n",
        "        for i,row in enumerate(board):\n",
        "            for j,val in enumerate(row):\n",
        "\n",
        "                if fake == False:\n",
        "                  color='white' if val==0 else 'red' if val==1 else 'yellow'\n",
        "                else:\n",
        "                  color='white' if val==0 else 'pink' if val==1 else 'olive'\n",
        "                circles.append(plt.Circle((j,i*-1),0.4,fc=color))\n",
        "\n",
        "        plt.gca().add_patch(rectangle)\n",
        "        for circle in circles:\n",
        "            plt.gca().add_patch(circle)\n",
        "\n",
        "        plt.axis('scaled')\n",
        "        plt.show()\n",
        "\n",
        "\n",
        "    # Note this function name gave me some issues as result is a little\n",
        "    #  too common and was used later for a return value causing the\n",
        "    #  next function call to not be defined on a bool\n",
        "    def result(self, board, player, action):\n",
        "      return self.make_move(board, action, player)\n",
        "\n",
        "\n",
        "\n",
        "    # Given a board, give it a \"goodness\" value from perspective of a player\n",
        "    # Goodness directly related to how many consecutive pieces we have\n",
        "    # very similar to how we check for the win condition\n",
        "    def score_position(self, board, y, x, player):\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        score = 0\n",
        "\n",
        "        # Get score by moving right\n",
        "        score += self.score_consecutive(board, y, x, 0, 1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving left\n",
        "        score += self.score_consecutive(board, y, x, 0, -1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving up\n",
        "        score += self.score_consecutive(board, y, x, 1, 0, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving down\n",
        "        score += self.score_consecutive(board, y, x, -1, 0, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving up right\n",
        "        score += self.score_consecutive(board, y, x, 1, 1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving down right\n",
        "        score += self.score_consecutive(board, y, x, 1, -1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving down left\n",
        "        score += self.score_consecutive(board, y, x, -1, -1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving up left\n",
        "        score += self.score_consecutive(board, y, x, -1, 1, player, num_row, num_col)\n",
        "\n",
        "        return score\n",
        "\n",
        "    # This is where some subjectivity comes into play\n",
        "    # We give a numerical score for the number of consecutive pieces we have\n",
        "    # given a start position and direction for the given position\n",
        "    # Note this is after a fake/simulated move has been made adding an additional piece\n",
        "    def score_consecutive(self, board, y, x, dy, dx, player, num_row, num_col):\n",
        "        score = 0\n",
        "        player_count = 0\n",
        "        empty_count = 0\n",
        "        opponent_count = 0\n",
        "\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        for i in range(4):\n",
        "            ny = y + dy * i\n",
        "            nx = x + dx * i\n",
        "            if 0 <= ny < num_row and 0 <= nx < num_col:\n",
        "                if board[ny][nx] == player:\n",
        "                    player_count += 1\n",
        "                elif board[ny][nx] == 0:\n",
        "                    empty_count += 1\n",
        "                elif board[ny][nx] == -player:\n",
        "                    opponent_count += 1\n",
        "\n",
        "        if player_count == 4:\n",
        "            score += 100\n",
        "        elif player_count == 3 and empty_count == 1:\n",
        "            score += 10\n",
        "        elif player_count == 2 and empty_count == 2:\n",
        "            score += 5\n",
        "        if opponent_count == 3 and empty_count == 1:\n",
        "            score -= 20\n",
        "\n",
        "        return score\n",
        "\n",
        "\n",
        "    # Note symmetric version just uses a different heuristic\n",
        "    # used for making a move given only the current boards\n",
        "    # state, later used for \"best move first\" logic\n",
        "    def score_position_symmetric(self, board, y, x, player):\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        score = 0\n",
        "\n",
        "        # Get score by moving right\n",
        "        score += self.score_consecutive_symmetric(board, y, x, 0, 1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving left\n",
        "        score += self.score_consecutive_symmetric(board, y, x, 0, -1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving up\n",
        "        score += self.score_consecutive_symmetric(board, y, x, 1, 0, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving down\n",
        "        score += self.score_consecutive_symmetric(board, y, x, -1, 0, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving up right\n",
        "        score += self.score_consecutive_symmetric(board, y, x, 1, 1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving down right\n",
        "        score += self.score_consecutive_symmetric(board, y, x, 1, -1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving down left\n",
        "        score += self.score_consecutive_symmetric(board, y, x, -1, -1, player, num_row, num_col)\n",
        "\n",
        "        # Get score by moving up left\n",
        "        score += self.score_consecutive_symmetric(board, y, x, -1, 1, player, num_row, num_col)\n",
        "\n",
        "        return score\n",
        "\n",
        "    # This is where some subjectivity comes into play\n",
        "    # We give a numerical score for the number of consecutive pieces we have\n",
        "    # given a start position and direction for the given position\n",
        "    # Note this is after a fake/simulated move has been made adding an additional piece\n",
        "    def score_consecutive_symmetric(self, board, y, x, dy, dx, player, num_row, num_col):\n",
        "        score = 0\n",
        "        player_count = 0\n",
        "        empty_count = 0\n",
        "        opponent_count = 0\n",
        "\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        for i in range(4):\n",
        "            ny = y + dy * i\n",
        "            nx = x + dx * i\n",
        "            if 0 <= ny < num_row and 0 <= nx < num_col:\n",
        "                if board[ny][nx] == player:\n",
        "                    player_count += 1\n",
        "                elif board[ny][nx] == 0:\n",
        "                    empty_count += 1\n",
        "                elif board[ny][nx] == -player:\n",
        "                    opponent_count += 1\n",
        "\n",
        "        if player_count == 4:\n",
        "            score += 45\n",
        "        elif player_count == 3 and empty_count == 1:\n",
        "            score += 35\n",
        "        elif player_count == 2 and empty_count == 2:\n",
        "            score += 25\n",
        "        elif opponent_count == 2 and empty_count == 2:\n",
        "            score += 20\n",
        "        if opponent_count == 3 and empty_count == 1:\n",
        "            score += 40\n",
        "        if opponent_count == 4:\n",
        "            score += 50\n",
        "\n",
        "        return score\n",
        "\n",
        "\n",
        "    # This generates a single score for an entire board\n",
        "    # Essentially just sums the score for your pieces\n",
        "    # and subtracts the opponents score for their pieces\n",
        "    # Ignores free spaces\n",
        "    def score_board(self, board, player):\n",
        "        opponent = -player\n",
        "\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == player:\n",
        "            return 100\n",
        "        elif winner == opponent:\n",
        "            return -100\n",
        "\n",
        "        score = 0\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        # For every position on the board\n",
        "        for y in range(num_row):\n",
        "            for x in range(num_col):\n",
        "\n",
        "                # if the position is ours, score it, if not score the opponent as a\n",
        "                if board[y][x] == player:\n",
        "                  score += self.score_position(board, y, x, player)\n",
        "                elif board[y][x] == opponent:\n",
        "                  score -= self.score_position(board, y, x, opponent)\n",
        "\n",
        "        return score\n",
        "\n",
        "\n",
        "\n",
        "    # So this gives a score to a board and returns it as a matrix of board size\n",
        "    # This ignores taken spaces and just rates free spaces based on how\n",
        "    # good of a move it is\n",
        "    # I use this for picking a move directly without considering \"future moves\"\n",
        "    def score_board_matrix(self, board, player):\n",
        "        opponent = -player\n",
        "\n",
        "\n",
        "        score = copy.deepcopy(board)\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        # For every position on the board\n",
        "        for y in range(num_row):\n",
        "            for x in range(num_col):\n",
        "\n",
        "                # if the position is ours, score it, if not score the opponent as a\n",
        "                if board[y][x] == player:\n",
        "                  score[y][x] = 0\n",
        "                elif board[y][x] == opponent:\n",
        "                  score[y][x] = 0\n",
        "                else:\n",
        "                  score[y][x] = self.score_position_symmetric(board, y, x, player)\n",
        "\n",
        "        return score\n",
        "\n",
        "    # This just select the column with the max score from the above function\n",
        "    def best_move_matrix(self, board):\n",
        "        num_col = len(board[0])\n",
        "        num_row = len(board)\n",
        "\n",
        "        max_score = -999999\n",
        "        max_col = 0\n",
        "\n",
        "        for y in range(num_row):\n",
        "            for x in range(num_col):\n",
        "              if board[y][x] > max_score:\n",
        "                max_score = board[y][x]\n",
        "                max_col = x\n",
        "\n",
        "        return max_col\n",
        "\n",
        "\n",
        "\n",
        "    # We aren't using a class here as everything is stateless, but doing a deep copy to ensure we never modify the original board\n",
        "    def minimax_actually_wins(self, original_board, depth, max_player, player, debug = False):\n",
        "\n",
        "        # recursive depth limit\n",
        "        if depth == 0:\n",
        "          if debug:\n",
        "            print(\"\\tdepth limit reached, no move possible\")\n",
        "          return self.score_board(board, player), None\n",
        "\n",
        "        # we do a lot of deep copies to ensure we dont modify the provided input board\n",
        "        board = copy.deepcopy(original_board)\n",
        "        opponent = -player\n",
        "        available = self.actions(board)\n",
        "        random.shuffle(available)\n",
        "\n",
        "\n",
        "        if debug:\n",
        "          print(\"minimax_actually_wins(board, \", depth, \", \", max_player, \", \", player, \")\")\n",
        "\n",
        "        # Check if the game is over\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == player:\n",
        "            if debug:\n",
        "              print(\"\\tWe already won\")\n",
        "              visualize(board)\n",
        "              print(\"\\tEnd 1\")\n",
        "            return 9999, None\n",
        "        elif winner == opponent:\n",
        "            if debug:\n",
        "              visualize(board)\n",
        "              print(\"\\tThey already won\")\n",
        "              visualize(board)\n",
        "              print(\"\\tEnd 2\")\n",
        "            return -9999, None\n",
        "        elif len(available) == 0:\n",
        "          if debug:\n",
        "            print(\"\\tdraw game, no move possible\")\n",
        "          return 0, None\n",
        "\n",
        "        # Check if we are maxing or min-ing\n",
        "        if max_player == player:\n",
        "            # set a really low value so we always beat it\n",
        "            max_score = -2147549183\n",
        "            max_column = random.choice(available)\n",
        "\n",
        "            for move in available:\n",
        "              new_board = self.make_move(board, move, player)\n",
        "              new_score, new_move = self.minimax_actually_wins(new_board, depth - 1, opponent, player)\n",
        "\n",
        "              # Max\n",
        "              if new_score > max_score:\n",
        "                max_score = new_score\n",
        "                max_column = move\n",
        "\n",
        "            return max_score, max_column\n",
        "        else:\n",
        "            # set a really high value so we always beat it\n",
        "            min_score = 2147549183\n",
        "            min_column = random.choice(available)\n",
        "\n",
        "            for move in available:\n",
        "              new_board = self.make_move(board, move, player)\n",
        "              new_score, new_move = self.minimax_actually_wins(new_board, depth - 1, player, player)\n",
        "\n",
        "              # Min\n",
        "              if new_score < min_score:\n",
        "                min_score = new_score\n",
        "                min_column = move\n",
        "\n",
        "            return min_score, min_column\n",
        "\n",
        "    def minimax_correct(self, original_board, depth, alpha, beta, max_player, player, debug = False):\n",
        "\n",
        "        # recursive depth limit\n",
        "        if depth == 0:\n",
        "          #print(\"\\tdepth limit reached, no move possible\")\n",
        "          return self.score_board(board, player), None\n",
        "\n",
        "        # copy board, get available moves\n",
        "        board = copy.deepcopy(original_board)\n",
        "        opponent = -player\n",
        "        available = self.actions(board)\n",
        "        random.shuffle(available)\n",
        "\n",
        "        # Check if the same is over (win/loss/draw)\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == max_player:\n",
        "            #print(\"\\tWe already won, no move possible\")\n",
        "            return 100, None\n",
        "        elif winner == -max_player:\n",
        "            #print(\"\\tThey already won, no move possible\")\n",
        "            return -100, None\n",
        "        elif len(available) == 0:\n",
        "            #print(\"\\tdraw game, no move possible\")\n",
        "            return 0, None\n",
        "\n",
        "        if max_player == player:\n",
        "            # set a really low value so we always beat it\n",
        "            max_score = -2147549183\n",
        "            max_column = random.choice(available)\n",
        "\n",
        "            for move in available:\n",
        "              # make the move, returns new board\n",
        "              new_board = self.make_move(board, move, player)\n",
        "\n",
        "              if debug:\n",
        "                self.visualize_debug(new_board, True)\n",
        "\n",
        "              # recursive call, simulate the opponents move\n",
        "              new_score, new_move = self.minimax_correct(new_board, depth - 1, alpha, beta, max_player, opponent, debug)\n",
        "\n",
        "              # Max\n",
        "              if new_score > max_score:\n",
        "                max_score = new_score\n",
        "                max_column = move\n",
        "\n",
        "              alpha = max(alpha, max_score)\n",
        "              if beta <= alpha:\n",
        "                  break\n",
        "\n",
        "            return max_score, max_column\n",
        "        else:\n",
        "          # set a really high value so we always beat it\n",
        "            min_score = 2147549183\n",
        "            min_column = random.choice(available)\n",
        "\n",
        "            for move in available:\n",
        "              new_board = self.make_move(board, move, player)\n",
        "\n",
        "              if debug:\n",
        "                self.visualize_debug(new_board, True)\n",
        "\n",
        "              # recursive call, simulate the opponents move\n",
        "              new_score, new_move = self.minimax_correct(new_board, depth - 1, alpha, beta, max_player, opponent, debug)\n",
        "\n",
        "              # Min\n",
        "              if new_score < min_score:\n",
        "                min_score = new_score\n",
        "                min_column = move\n",
        "\n",
        "              beta = min(beta, min_score)\n",
        "              if beta <= alpha:\n",
        "                  break\n",
        "\n",
        "            return min_score, min_column\n",
        "\n",
        "    def minimax_correct_no_heuristic(self, original_board, depth, alpha, beta, max_player, player, debug = False):\n",
        "\n",
        "        # recursive depth limit\n",
        "        if depth == 0:\n",
        "          #print(\"\\tdepth limit reached, no move possible\")\n",
        "          return 0, None\n",
        "\n",
        "        # copy board, get available moves\n",
        "        board = copy.deepcopy(original_board)\n",
        "        opponent = -player\n",
        "        available = self.actions(board)\n",
        "        random.shuffle(available)\n",
        "\n",
        "        # Check if the same is over (win/loss/draw)\n",
        "        winner = self.check_winner(board)\n",
        "        if winner == max_player:\n",
        "            #print(\"\\tWe already won, no move possible\")\n",
        "            return 1, None\n",
        "        elif winner == -max_player:\n",
        "            #print(\"\\tThey already won, no move possible\")\n",
        "            return -1, None\n",
        "        elif len(available) == 0:\n",
        "            #print(\"\\tdraw game, no move possible\")\n",
        "            return 0, None\n",
        "\n",
        "        if max_player == player:\n",
        "            # set a really low value so we always beat it\n",
        "            max_score = -2147549183\n",
        "            max_column = random.choice(available)\n",
        "\n",
        "            for move in available:\n",
        "              # make the move, returns new board\n",
        "              new_board = self.make_move(board, move, player)\n",
        "\n",
        "              if debug:\n",
        "                self.visualize_debug(new_board, True)\n",
        "\n",
        "              # recursive call, simulate the opponents move\n",
        "              new_score, new_move = self.minimax_correct(new_board, depth - 1, alpha, beta, max_player, opponent, debug)\n",
        "\n",
        "              # Max\n",
        "              if new_score > max_score:\n",
        "                max_score = new_score\n",
        "                max_column = move\n",
        "\n",
        "              alpha = max(alpha, max_score)\n",
        "              if beta <= alpha:\n",
        "                  break\n",
        "\n",
        "            return max_score, max_column\n",
        "        else:\n",
        "          # set a really high value so we always beat it\n",
        "            min_score = 2147549183\n",
        "            min_column = random.choice(available)\n",
        "\n",
        "            for move in available:\n",
        "              new_board = self.make_move(board, move, player)\n",
        "\n",
        "              if debug:\n",
        "                self.visualize_debug(new_board, True)\n",
        "\n",
        "              # recursive call, simulate the opponents move\n",
        "              new_score, new_move = self.minimax_correct(new_board, depth - 1, alpha, beta, max_player, opponent, debug)\n",
        "\n",
        "              # Min\n",
        "              if new_score < min_score:\n",
        "                min_score = new_score\n",
        "                min_column = move\n",
        "\n",
        "              beta = min(beta, min_score)\n",
        "              if beta <= alpha:\n",
        "                  break\n",
        "\n",
        "            return min_score, min_column\n",
        "\n",
        "    def minimax_correct_best_move(self, original_board, depth, alpha, beta, max_player, player, debug = False):\n",
        "\n",
        "        # recursive depth limit\n",
        "        if depth == 0:\n",
        "          #print(\"\\tdepth limit reached, no move possible\")\n",
        "          return self.score_board(board, player), None\n",
        "\n",
        "        # copy board, get available moves\n",
        "        board = copy.deepcopy(original_board)\n",
        "        opponent = -player\n",
        "        available =  self.actions(board)\n",
        "        random.shuffle(available)\n",
        "\n",
        "        # Check if the same is over (win/loss/draw)\n",
        "        winner =  self.check_winner(board)\n",
        "        if winner == max_player:\n",
        "            #print(\"\\tWe already won, no move possible\")\n",
        "            return 100, None\n",
        "        elif winner == -max_player:\n",
        "            #print(\"\\tThey already won, no move possible\")\n",
        "            return -100, None\n",
        "        elif len(available) == 0:\n",
        "            #print(\"\\tdraw game, no move possible\")\n",
        "            return 0, None\n",
        "\n",
        "        if max_player == player:\n",
        "            # set a really low value so we always beat it\n",
        "            max_score = -2147549183\n",
        "            max_column = random.choice(available)\n",
        "\n",
        "            # get the best move\n",
        "            mat =  self.score_board_matrix(board, opponent)\n",
        "            move1 =  self.best_move_matrix(mat)\n",
        "\n",
        "            # insert it first\n",
        "            available.insert(0, move1)\n",
        "\n",
        "            new_available = []\n",
        "            # remove duplicates\n",
        "            for move in available:\n",
        "              if move not in new_available:\n",
        "                new_available.append(move)\n",
        "\n",
        "            # remove duplicate from end\n",
        "\n",
        "\n",
        "            for move in new_available:\n",
        "              # make the move, returns new board\n",
        "              new_board =  self.make_move(board, move, player)\n",
        "\n",
        "              if debug:\n",
        "                 self.visualize_debug(new_board, True)\n",
        "\n",
        "              # recursive call, simulate the opponents move\n",
        "              new_score, new_move =  self.minimax_correct(new_board, depth - 1, alpha, beta, max_player, opponent, debug)\n",
        "\n",
        "              # Max\n",
        "              if new_score > max_score:\n",
        "                max_score = new_score\n",
        "                max_column = move\n",
        "\n",
        "              alpha = max(alpha, max_score)\n",
        "              if beta <= alpha:\n",
        "                  break\n",
        "\n",
        "            return max_score, max_column\n",
        "        else:\n",
        "          # set a really high value so we always beat it\n",
        "            min_score = 2147549183\n",
        "            min_column = random.choice(available)\n",
        "\n",
        "\n",
        "            # get the best move\n",
        "            mat = self.score_board_matrix(board, opponent)\n",
        "            move1 = self.best_move_matrix(mat)\n",
        "\n",
        "            # insert it first\n",
        "            available.insert(0, move1)\n",
        "\n",
        "            new_available = []\n",
        "            # remove duplicates\n",
        "            for move in available:\n",
        "              if move not in new_available:\n",
        "                new_available.append(move)\n",
        "\n",
        "            for move in new_available:\n",
        "              new_board = self.make_move(board, move, player)\n",
        "\n",
        "              if debug:\n",
        "                self.visualize_debug(new_board, True)\n",
        "\n",
        "              # recursive call, simulate the opponents move\n",
        "              new_score, new_move = self.minimax_correct(new_board, depth - 1, alpha, beta, max_player, opponent, debug)\n",
        "\n",
        "              # Min\n",
        "              if new_score < min_score:\n",
        "                min_score = new_score\n",
        "                min_column = move\n",
        "\n",
        "              beta = min(beta, min_score)\n",
        "              if beta <= alpha:\n",
        "                  break\n",
        "\n",
        "            return min_score, min_column\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J5opzfi11-qP"
      },
      "source": [
        "Create an instance of the class-based agent and create the configuration list for the environment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "ntPrZ0nm1-qP"
      },
      "outputs": [],
      "source": [
        "awright_agent = AwrightAgent(\"Connect-4 Agent\")\n",
        "\n",
        "players = [\n",
        "    {\n",
        "        \"algo\": awright_agent.act,\n",
        "        \"name\": \"AWright Agent (Class)\",\n",
        "        \"player\": +1,\n",
        "        \"args\": {}\n",
        "    },\n",
        "    {\n",
        "        \"algo\": act_random,\n",
        "        \"name\": \"Random Agent (Function)\",\n",
        "        \"player\": -1,\n",
        "        \"args\": {}\n",
        "    }\n",
        "]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qhtUce6P1-qP"
      },
      "source": [
        "Run the game"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "xxSsl-Aq1-qP",
        "outputId": "c8ac615e-da4b-4692-a48b-ae1619899bb4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AWright Agent (Class) took a total of 24.979 seconds\n",
            "Random Agent (Function) took a total of 0.0 seconds\n",
            "The winner is AWright Agent (Class) (1)\n",
            "Turns Taken: 7\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "result,final_board,all_boards = truly_dynamic_environment(players, size=(6,7), visual = True)\n",
        "\n",
        "visualize(final_board)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8NiDYbSr1-qP"
      },
      "source": [
        "Slow a replay for analysis."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "_WASz3vm1-qP",
        "outputId": "9a889572-9192-46a5-d1ae-748352512d88"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "replay(all_boards)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": ".venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.3"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
